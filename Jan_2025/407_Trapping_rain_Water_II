class Solution {
public:
    typedef pair<int, pair<int, int>> coord;
    vector<vector<int>> directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
    int trapRainWater(vector<vector<int>>& heightMap) {
        int m = heightMap.size();
        int n = heightMap[0].size();
        priority_queue<coord, vector<coord>, greater<>> boundaryCells; // min-Heap {height, {i, j}}
        vector<vector<bool>> visited(m, vector<bool>(n, false));

        // left most column and right most column (0, n-1)
        for (int row = 0; row < m; row++) {
            for (int col : {0, n - 1}) {
                boundaryCells.push({heightMap[row][col], {row, col}});
                visited[row][col] = true;
            }
        }

        // top most row and bottom most row (0, m-1)
        for (int col = 0; col < n; col++) {
            for (int row : {0, m - 1}) {
                boundaryCells.push({heightMap[row][col], {row, col}});
                visited[row][col] = true;
            }
        }

        // T.C: O(m*n * log(m*n))
        // S.C: O(m*n)
        int water = 0;
        while (!boundaryCells.empty()) {
            coord p = boundaryCells.top();
            boundaryCells.pop(); // log(size of heap)
            int height = p.first;
            int i = p.second.first;
            int j = p.second.second;

            // find neighbors
            for (vector<int>& dir : directions) {
                int i1 = i + dir[0];
                int j1 = j + dir[1];
                if (i1 >= 0 && i1 < m && j1 >= 0 && j1 < n && !visited[i1][j1]) {
                    water += max(height - heightMap[i1][j1], 0);
                    boundaryCells.push({max(height, heightMap[i1][j1]), {i1, j1}});
                    visited[i1][j1] = true;
                }
            }
        }
        return water;
    }
};